// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Reactive.Linq;
using CoreGraphics;
using Foundation;
using ReactiveUI;
using SidebarNavigation;
using UIKit;

namespace NavDrawer.iOS
{
	public partial class RootViewController : ReactiveViewController, IViewFor<NavDrawerViewModel>
	{
		public static SidebarController SidebarController { get; private set; }

		public RootViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			var mainController = AppDelegate.GetViewController(AppDelegate.MainStoryboard, "MainViewController") as MainViewController;
			var drawerController = AppDelegate.GetViewController(AppDelegate.MainStoryboard, "DrawerViewController") as DrawerViewController;

			mainController.ViewModel = this.ViewModel;
			drawerController.ViewModel = this.ViewModel;
			SidebarController = new SidebarController(this, mainController, drawerController);
			SidebarController.MenuWidth = 280;
			SidebarController.ReopenOnRotate = false;
			SidebarController.MenuLocation = MenuLocations.Left;
			SidebarController.HasShadowing = true;

			this.ViewModel.WhenAnyValue(vm => vm.SelectedMenu)
			    .Where(x => x != MenuAction.None)
				.Subscribe(result =>
				{
					switch (result)
					{
						case MenuAction.Home:
							this.ViewModel.MenuDescription = "Hello World";
							break;
						case MenuAction.Search:
							this.ViewModel.MenuDescription = "This is search menu";
							break;
						case MenuAction.Settings:
							this.ViewModel.MenuDescription = "This is settings menu";
							break;
						case MenuAction.Sync:
							this.ViewModel.MenuDescription = "This is sync menu";
							break;
						case MenuAction.Logout:
							this.ViewModel.MenuDescription = "This is logout menu";
							break;
					}
					this.ViewModel.SelectedMenu = MenuAction.None;
					SidebarController.ToggleMenu();
				});

            this.NavigationController.SetNavigationBarHidden(true, false);
		}

		NavDrawerViewModel _ViewModel;

		public NavDrawerViewModel ViewModel
		{
			get { return _ViewModel; }
			set { this.RaiseAndSetIfChanged(ref _ViewModel, value); }
		}

		object IViewFor.ViewModel
		{
			get { return ViewModel; }
			set { ViewModel = (NavDrawerViewModel)value; }
		}
	}
}
